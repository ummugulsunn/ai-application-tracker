// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String?
  firstName           String
  lastName            String
  phone               String?
  location            String?
  experienceLevel     String?
  desiredSalaryMin    Int?
  desiredSalaryMax    Int?
  preferredLocations  String[]
  skills              String[]
  industries          String[]
  jobTypes            String[]
  resumeUrl           String?
  linkedinUrl         String?
  githubUrl           String?
  portfolioUrl        String?
  preferences         Json?
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  applications        Application[]
  aiAnalyses          AIAnalysis[]
  jobRecommendations  JobRecommendation[]
  contacts            Contact[]
  reminders           Reminder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id              String    @id @default(cuid())
  userId          String
  company         String
  position        String
  location        String?
  jobType         String?
  salaryRange     String?
  status          String
  priority        String    @default("Medium")
  appliedDate     DateTime
  responseDate    DateTime?
  interviewDate   DateTime?
  offerDate       DateTime?
  rejectionDate   DateTime?
  notes           String?
  jobDescription  String?
  requirements    String[]
  contactPerson   String?
  contactEmail    String?
  contactPhone    String?
  companyWebsite  String?
  jobUrl          String?
  tags            String[]
  aiMatchScore    Int?
  aiInsights      Json?
  followUpDate    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders       Reminder[]
}

model AIAnalysis {
  id              String    @id @default(cuid())
  userId          String
  analysisType    String
  inputData       Json
  analysisResult  Json
  confidenceScore Float?
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobRecommendation {
  id              String    @id @default(cuid())
  userId          String
  jobTitle        String
  company         String
  location        String?
  salaryRange     String?
  jobDescription  String?
  requirements    String[]
  jobUrl          String?
  source          String
  matchScore      Int
  matchReasons    String[]
  status          String    @default("new")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                  String    @id @default(cuid())
  userId              String
  firstName           String
  lastName            String
  email               String?
  phone               String?
  company             String?
  position            String?
  linkedinUrl         String?
  relationshipType    String?
  connectionStrength  String?
  lastContactDate     DateTime?
  notes               String?
  tags                String[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reminder {
  id              String      @id @default(cuid())
  userId          String
  applicationId   String?
  reminderType    String
  title           String
  description     String?
  dueDate         DateTime
  isCompleted     Boolean     @default(false)
  createdAt       DateTime    @default(now())

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application     Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}
